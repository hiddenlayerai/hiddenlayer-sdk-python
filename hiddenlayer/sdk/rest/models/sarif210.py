# coding: utf-8

"""
    HiddenLayer ModelScan V2

    HiddenLayer ModelScan API for scanning of models

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hiddenlayer.sdk.rest.models.external_properties import ExternalProperties
from hiddenlayer.sdk.rest.models.property_bag import PropertyBag
from hiddenlayer.sdk.rest.models.run import Run
from typing import Optional, Set
from typing_extensions import Self

class Sarif210(BaseModel):
    """
    Static Analysis Results Format (SARIF) Version 2.1.0 JSON Schema: a standard format for the output of static analysis tools.
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="The URI of the JSON schema corresponding to the version.", alias="$schema")
    version: Dict[str, Any] = Field(description="The SARIF format version of this log file.")
    runs: Annotated[List[Run], Field(min_length=0)] = Field(description="The set of runs contained in this log file.")
    inline_external_properties: Optional[Annotated[List[ExternalProperties], Field(min_length=0)]] = Field(default=None, description="References to external property files that share data between runs.", alias="inlineExternalProperties")
    properties: Optional[PropertyBag] = None
    __properties: ClassVar[List[str]] = ["$schema", "version", "runs", "inlineExternalProperties", "properties"]

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['2.1.0']):
            raise ValueError("must be one of enum values ('2.1.0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sarif210 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item in self.runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inline_external_properties (list)
        _items = []
        if self.inline_external_properties:
            for _item in self.inline_external_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inlineExternalProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sarif210 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$schema": obj.get("$schema"),
            "version": obj.get("version"),
            "runs": [Run.from_dict(_item) for _item in obj["runs"]] if obj.get("runs") is not None else None,
            "inlineExternalProperties": [ExternalProperties.from_dict(_item) for _item in obj["inlineExternalProperties"]] if obj.get("inlineExternalProperties") is not None else None,
            "properties": PropertyBag.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj


