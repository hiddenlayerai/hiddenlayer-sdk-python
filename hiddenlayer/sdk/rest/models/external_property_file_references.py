# coding: utf-8

"""
    HiddenLayer ModelScan V2

    HiddenLayer ModelScan API for scanning of models

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hiddenlayer.sdk.rest.models.external_property_file_reference import ExternalPropertyFileReference
from hiddenlayer.sdk.rest.models.property_bag import PropertyBag
from typing import Optional, Set
from typing_extensions import Self

class ExternalPropertyFileReferences(BaseModel):
    """
    References to external property files that should be inlined with the content of a root log file.
    """ # noqa: E501
    conversion: Optional[ExternalPropertyFileReference] = None
    graphs: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing a run.graphs object to be merged with the root log file.")
    externalized_properties: Optional[ExternalPropertyFileReference] = Field(default=None, alias="externalizedProperties")
    artifacts: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.artifacts arrays to be merged with the root log file.")
    invocations: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.invocations arrays to be merged with the root log file.")
    logical_locations: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.logicalLocations arrays to be merged with the root log file.", alias="logicalLocations")
    thread_flow_locations: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.threadFlowLocations arrays to be merged with the root log file.", alias="threadFlowLocations")
    results: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.results arrays to be merged with the root log file.")
    taxonomies: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.taxonomies arrays to be merged with the root log file.")
    addresses: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.addresses arrays to be merged with the root log file.")
    driver: Optional[ExternalPropertyFileReference] = None
    extensions: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.extensions arrays to be merged with the root log file.")
    policies: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.policies arrays to be merged with the root log file.")
    translations: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.translations arrays to be merged with the root log file.")
    web_requests: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.requests arrays to be merged with the root log file.", alias="webRequests")
    web_responses: Optional[Annotated[List[Optional[ExternalPropertyFileReference]], Field(min_length=0)]] = Field(default=None, description="An array of external property files containing run.responses arrays to be merged with the root log file.", alias="webResponses")
    properties: Optional[PropertyBag] = None
    __properties: ClassVar[List[str]] = ["conversion", "graphs", "externalizedProperties", "artifacts", "invocations", "logicalLocations", "threadFlowLocations", "results", "taxonomies", "addresses", "driver", "extensions", "policies", "translations", "webRequests", "webResponses", "properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalPropertyFileReferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversion
        if self.conversion:
            _dict['conversion'] = self.conversion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in graphs (list)
        _items = []
        if self.graphs:
            for _item in self.graphs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['graphs'] = _items
        # override the default output from pydantic by calling `to_dict()` of externalized_properties
        if self.externalized_properties:
            _dict['externalizedProperties'] = self.externalized_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invocations (list)
        _items = []
        if self.invocations:
            for _item in self.invocations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in logical_locations (list)
        _items = []
        if self.logical_locations:
            for _item in self.logical_locations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['logicalLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thread_flow_locations (list)
        _items = []
        if self.thread_flow_locations:
            for _item in self.thread_flow_locations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['threadFlowLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxonomies (list)
        _items = []
        if self.taxonomies:
            for _item in self.taxonomies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxonomies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of driver
        if self.driver:
            _dict['driver'] = self.driver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item in self.policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['policies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in translations (list)
        _items = []
        if self.translations:
            for _item in self.translations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['translations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_requests (list)
        _items = []
        if self.web_requests:
            for _item in self.web_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webRequests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_responses (list)
        _items = []
        if self.web_responses:
            for _item in self.web_responses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webResponses'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # set to None if conversion (nullable) is None
        # and model_fields_set contains the field
        if self.conversion is None and "conversion" in self.model_fields_set:
            _dict['conversion'] = None

        # set to None if externalized_properties (nullable) is None
        # and model_fields_set contains the field
        if self.externalized_properties is None and "externalized_properties" in self.model_fields_set:
            _dict['externalizedProperties'] = None

        # set to None if driver (nullable) is None
        # and model_fields_set contains the field
        if self.driver is None and "driver" in self.model_fields_set:
            _dict['driver'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalPropertyFileReferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversion": ExternalPropertyFileReference.from_dict(obj["conversion"]) if obj.get("conversion") is not None else None,
            "graphs": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["graphs"]] if obj.get("graphs") is not None else None,
            "externalizedProperties": ExternalPropertyFileReference.from_dict(obj["externalizedProperties"]) if obj.get("externalizedProperties") is not None else None,
            "artifacts": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "invocations": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["invocations"]] if obj.get("invocations") is not None else None,
            "logicalLocations": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["logicalLocations"]] if obj.get("logicalLocations") is not None else None,
            "threadFlowLocations": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["threadFlowLocations"]] if obj.get("threadFlowLocations") is not None else None,
            "results": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "taxonomies": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["taxonomies"]] if obj.get("taxonomies") is not None else None,
            "addresses": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "driver": ExternalPropertyFileReference.from_dict(obj["driver"]) if obj.get("driver") is not None else None,
            "extensions": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "policies": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None,
            "translations": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["translations"]] if obj.get("translations") is not None else None,
            "webRequests": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["webRequests"]] if obj.get("webRequests") is not None else None,
            "webResponses": [ExternalPropertyFileReference.from_dict(_item) for _item in obj["webResponses"]] if obj.get("webResponses") is not None else None,
            "properties": PropertyBag.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj


