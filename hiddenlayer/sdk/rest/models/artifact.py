# coding: utf-8

"""
    HiddenLayer ModelScan V2

    HiddenLayer ModelScan API for scanning of models

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hiddenlayer.sdk.rest.models.artifact_content import ArtifactContent
from hiddenlayer.sdk.rest.models.artifact_location import ArtifactLocation
from hiddenlayer.sdk.rest.models.message import Message
from hiddenlayer.sdk.rest.models.property_bag import PropertyBag
from typing import Optional, Set
from typing_extensions import Self

class Artifact(BaseModel):
    """
    A single artifact. In some cases, this artifact might be nested within another artifact.
    """ # noqa: E501
    description: Optional[Message] = None
    location: Optional[ArtifactLocation] = None
    parent_index: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, description="Identifies the index of the immediate parent of the artifact, if this artifact is nested.", alias="parentIndex")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The offset in bytes of the artifact within its containing artifact.")
    length: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, description="The length of the artifact in bytes.")
    roles: Optional[Annotated[List[StrictStr], Field(min_length=0)]] = Field(default=None, description="The role or roles played by the artifact in the analysis.")
    mime_type: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The MIME type (RFC 2045) of the artifact.", alias="mimeType")
    contents: Optional[ArtifactContent] = None
    encoding: Optional[StrictStr] = Field(default=None, description="Specifies the encoding for an artifact object that refers to a text file.")
    source_language: Optional[StrictStr] = Field(default=None, description="Specifies the source language for any artifact object that refers to a text file that contains source code.", alias="sourceLanguage")
    hashes: Optional[Dict[str, StrictStr]] = Field(default=None, description="A dictionary, each of whose keys is the name of a hash function and each of whose values is the hashed value of the artifact produced by the specified hash function.")
    last_modified_time_utc: Optional[datetime] = Field(default=None, description="The Coordinated Universal Time (UTC) date and time at which the artifact was most recently modified. See \"Date/time properties\" in the SARIF spec for the required format.", alias="lastModifiedTimeUtc")
    properties: Optional[PropertyBag] = None
    __properties: ClassVar[List[str]] = ["description", "location", "parentIndex", "offset", "length", "roles", "mimeType", "contents", "encoding", "sourceLanguage", "hashes", "lastModifiedTimeUtc", "properties"]

    @field_validator('roles')
    def roles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['analysisTarget', 'attachment', 'responseFile', 'resultFile', 'standardStream', 'tracedFile', 'unmodified', 'modified', 'added', 'deleted', 'renamed', 'uncontrolled', 'driver', 'extension', 'translation', 'taxonomy', 'policy', 'referencedOnCommandLine', 'memoryContents', 'directory', 'userSpecifiedConfiguration', 'toolSpecifiedConfiguration', 'debugOutputFile']):
                raise ValueError("each list item must be one of ('analysisTarget', 'attachment', 'responseFile', 'resultFile', 'standardStream', 'tracedFile', 'unmodified', 'modified', 'added', 'deleted', 'renamed', 'uncontrolled', 'driver', 'extension', 'translation', 'taxonomy', 'policy', 'referencedOnCommandLine', 'memoryContents', 'directory', 'userSpecifiedConfiguration', 'toolSpecifiedConfiguration', 'debugOutputFile')")
        return value

    @field_validator('mime_type')
    def mime_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[^\/]+\/.+", value):
            raise ValueError(r"must validate the regular expression /[^\/]+\/.+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Artifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contents
        if self.contents:
            _dict['contents'] = self.contents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Artifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": Message.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "location": ArtifactLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "parentIndex": obj.get("parentIndex") if obj.get("parentIndex") is not None else -1,
            "offset": obj.get("offset"),
            "length": obj.get("length") if obj.get("length") is not None else -1,
            "roles": obj.get("roles"),
            "mimeType": obj.get("mimeType"),
            "contents": ArtifactContent.from_dict(obj["contents"]) if obj.get("contents") is not None else None,
            "encoding": obj.get("encoding"),
            "sourceLanguage": obj.get("sourceLanguage"),
            "hashes": obj.get("hashes"),
            "lastModifiedTimeUtc": obj.get("lastModifiedTimeUtc"),
            "properties": PropertyBag.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj


