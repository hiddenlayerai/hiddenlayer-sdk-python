# coding: utf-8

"""
    HiddenLayer ModelScan V2

    HiddenLayer ModelScan API for scanning of models

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hiddenlayer.sdk.rest.models.artifact_content import ArtifactContent
from hiddenlayer.sdk.rest.models.message import Message
from hiddenlayer.sdk.rest.models.property_bag import PropertyBag
from typing import Optional, Set
from typing_extensions import Self

class Region(BaseModel):
    """
    A region within an artifact where a result was detected.
    """ # noqa: E501
    start_line: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The line number of the first character in the region.", alias="startLine")
    start_column: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The column number of the first character in the region.", alias="startColumn")
    end_line: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The line number of the last character in the region.", alias="endLine")
    end_column: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The column number of the character following the end of the region.", alias="endColumn")
    char_offset: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, description="The zero-based offset from the beginning of the artifact of the first character in the region.", alias="charOffset")
    char_length: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The length of the region in characters.", alias="charLength")
    byte_offset: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, description="The zero-based offset from the beginning of the artifact of the first byte in the region.", alias="byteOffset")
    byte_length: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The length of the region in bytes.", alias="byteLength")
    snippet: Optional[ArtifactContent] = None
    message: Optional[Message] = None
    source_language: Optional[StrictStr] = Field(default=None, description="Specifies the source language, if any, of the portion of the artifact specified by the region object.", alias="sourceLanguage")
    properties: Optional[PropertyBag] = None
    __properties: ClassVar[List[str]] = ["startLine", "startColumn", "endLine", "endColumn", "charOffset", "charLength", "byteOffset", "byteLength", "snippet", "message", "sourceLanguage", "properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Region from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of snippet
        if self.snippet:
            _dict['snippet'] = self.snippet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Region from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startLine": obj.get("startLine"),
            "startColumn": obj.get("startColumn"),
            "endLine": obj.get("endLine"),
            "endColumn": obj.get("endColumn"),
            "charOffset": obj.get("charOffset") if obj.get("charOffset") is not None else -1,
            "charLength": obj.get("charLength"),
            "byteOffset": obj.get("byteOffset") if obj.get("byteOffset") is not None else -1,
            "byteLength": obj.get("byteLength"),
            "snippet": ArtifactContent.from_dict(obj["snippet"]) if obj.get("snippet") is not None else None,
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "sourceLanguage": obj.get("sourceLanguage"),
            "properties": PropertyBag.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj


