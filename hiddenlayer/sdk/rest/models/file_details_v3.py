# coding: utf-8

"""
    HiddenLayer ModelScan V2

    HiddenLayer ModelScan API for scanning of models

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FileDetailsV3(BaseModel):
    """
    FileDetailsV3
    """ # noqa: E501
    estimated_time: StrictStr = Field(description="estimated time to scan the file")
    md5: Annotated[str, Field(strict=True)] = Field(description="hexadecimal md5 hash of file")
    sha256: Annotated[str, Field(strict=True)] = Field(description="hexadecimal sha256 hash of file")
    tlsh: Annotated[str, Field(strict=True)] = Field(description="TLSH hash of file")
    file_size: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="size of the file in human readable format")
    file_size_bytes: Optional[StrictInt] = Field(default=None, description="size of the file in bytes")
    file_type: StrictStr = Field(description="type of the file")
    file_type_details: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["estimated_time", "md5", "sha256", "tlsh", "file_size", "file_size_bytes", "file_type", "file_type_details"]

    @field_validator('md5')
    def md5_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{32}$/")
        return value

    @field_validator('sha256')
    def sha256_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}$/")
        return value

    @field_validator('tlsh')
    def tlsh_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{70}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{70}$/")
        return value

    @field_validator('file_size')
    def file_size_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)?\s?(B|KB|MB|GB|TB)$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)?\s?(B|KB|MB|GB|TB)$/")
        return value

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['safetensors', 'RDS', 'onnx', 'tensorflow', 'keras', 'pytorch', 'pickle', 'NEMO', 'numpy', 'unknown', 'ZIP', 'TAR', 'gguf']):
            raise ValueError("must be one of enum values ('safetensors', 'RDS', 'onnx', 'tensorflow', 'keras', 'pytorch', 'pickle', 'NEMO', 'numpy', 'unknown', 'ZIP', 'TAR', 'gguf')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileDetailsV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileDetailsV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "estimated_time": obj.get("estimated_time"),
            "md5": obj.get("md5"),
            "sha256": obj.get("sha256"),
            "tlsh": obj.get("tlsh"),
            "file_size": obj.get("file_size"),
            "file_size_bytes": obj.get("file_size_bytes"),
            "file_type": obj.get("file_type"),
            "file_type_details": obj.get("file_type_details")
        })
        return _obj


